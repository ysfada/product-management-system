create table if not exists "public"."product_images"(
    -- "id"         uuid        not null default gen_random_uuid(),
    "id"         int         not null generated by default as identity(start with 1 increment by 1),
    "product_id" int         not null,
    "image_id"   int         not null,
    "created_at" timestamptz not null,
    "updated_at" timestamptz null,
    "deleted_at" timestamptz null,
    foreign key("product_id") references "product"("id") on delete restrict deferrable initially deferred,
    foreign key("image_id")   references "image"("id")   on delete restrict deferrable initially deferred,
    constraint "product_images_id_pkey" primary key("id")
);

create unique index if not exists "product_images_product_id_image_id_uniq"
on "public"."product_images"(
	"product_id",
	"image_id"
);

create index if not exists "product_images_product_id"
on "public"."product_images"(
	"product_id"
);

create trigger "_timestamps" before insert or update or delete
on "public"."product_images" for each row
    execute procedure "public"."tg__timestamps"();
